plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    alias(libs.plugins.axion.release)
    alias(libs.plugins.architectury)
    alias(libs.plugins.loom)             apply false
    alias(libs.plugins.loom.quiltflower) apply false
}
scmVersion {
    tag {
        prefix = ""
    }


    //versionIncrementer "incrementMajor"
    //versionIncrementer "incrementMinor"
    versionIncrementer "incrementPatch"


}

group = project_group
version = "1.1.1"
archivesBaseName = project_name

architectury {
    minecraft = libs.versions.minecraftVersion
}


subprojects {

    apply plugin: "java"
    apply plugin: "java-library"

    apply plugin: libs.plugins.architectury.get().pluginId
    apply plugin: libs.plugins.loom.asProvider().get().pluginId
    apply plugin: libs.plugins.loom.quiltflower.get().pluginId



    group = rootProject.group
    version = rootProject.version
    archivesBaseName = project_name
    loom {
        silentMojangMappingsLicense()
    }

    java {
        withSourcesJar()
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.release.set(17)
    }


    dependencies {
        minecraft "com.mojang:minecraft:${libs.versions.minecraftVersion.get()}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${libs.versions.minecraftVersion.get()}:${libs.versions.parchment.get()}@zip")
        }



        compileOnly(libs.bundles.annotations)
        annotationProcessor(libs.bundles.annotations)

    }


}

allprojects {

    repositories {
        mavenCentral()

        maven { url 'https://jitpack.io' }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'https://redempt.dev' }
        maven { url = "https://maven.parchmentmc.org" }

        exclusiveContent {
            forRepository {
                maven {
                    name = "Modrinth"
                    url = "https://api.modrinth.com/maven"
                }
            }
            filter {
                includeGroup "maven.modrinth"
            }
        }
    }
    compileJava {
        dependsOn(clean)
    }
}